<project name="bisdw" default="compile" basedir=".">

    <!-- === Property Definitions ======================================== -->

    <!-- Optional overridden properties -->
    <property file="${basedir}/version.txt"/>


    <!-- ==== File and Directory Names =================================== -->
    <property name="app.name" value="bisdw" />
    <property name="app.path" value="/${app.name}" />
    <property name="app.version" value="0.1.0" />
    <property name="build.home" value="${basedir}/target" />
    <property name="dist.home" value="${basedir}/dist" />
    <property name="bin.home" value="${basedir}/bin" />
	<property name="bin.home" value="${basedir}/bin" />
	<property name="resources.home" value="${basedir}/src/main/resources" />
    <property name="docs.home" value="${basedir}/doc" />
    <property name="src.home" value="${basedir}/src" />
	<property name="javasrc.home" value="${basedir}/src/main/java" />
    <property name="javagensrc.home" value="${basedir}/src/main/generated" />
	<property name="scriptsrc.home" value="${basedir}/src/main/scripts" />
	<property name="migscriptsrc.home" value="${basedir}/src/main/migscripts" />
	<property name="bischeckdir.home" value="../bischeck_maintenance-0.4.x" />
	<property name="javac_target" value="6" />
    <property name="javac_src" value="6" />


    <!--  === Compilation Control Options ================================ -->
    <property name="compile.debug" value="true" />
    <property name="compile.deprecation" value="false" />
    <property name="compile.optimize" value="false" />


    <!-- ==== Compilation Classpath ====================================== -->
    <path id="compile.classpath">
        <fileset dir="${basedir}/lib/">
            <include name="*.jar" />
        </fileset>
    	<fileset dir="${bischeckdir.home}/lib/">
    	    <include name="*.jar" />
    	</fileset>
    </path>



    <!-- === All Target ================================================= -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${build.home}" />
    </target>


    <target name="compile" depends="prepare" description="Compile Java sources">
        <!-- Compile Java classes as necessary -->
                
        <javac destdir="${build.home}/classes"
               debug="${compile.debug}" deprecation="${compile.deprecation}"
               optimize="${compile.optimize}" target="${javac_target}"
               excludes="*.java"
               source="${javac_src}">
        	
        	<src path="${javagensrc.home}" />            
            <src path="${javasrc.home}" />
            <classpath refid="compile.classpath" />
        </javac>
        
    </target>
    
	
    <target name="dist" depends="clean, genjaxb, compile, javadoc, readme, svninfo " description="Create binary distribution">
        
        <jar index="true" destfile="${build.home}/lib/${app.name}-${app.version}.jar" basedir="${build.home}/classes" >
            <manifest>
                <attribute name="Built-By" value="Anders Håål"/>
                <attribute name="Jar" value="${app.name}"/>
                <attribute name="Version" value="${app.version}"/>
                <attribute name="Copyright" value="(C) 2010-2012 Anders Håål, Ingenjörsbyn"/>  
            </manifest>
        </jar>
 		
        <copy todir="${build.home}/lib">
	       <fileset dir="${basedir}/lib"/>
        </copy>

    	<copy todir="${build.home}/scripts">
    	   <fileset dir="${scriptsrc.home}"/>
    	</copy>
    	
    	<copy todir="${build.home}/migscripts">
           <fileset dir="${migscriptsrc.home}"/>
        </copy>

    	<copy todir="${build.home}/resources">
           <fileset dir="${resources.home}"/>
        </copy>

        <copy todir="${build.home}/etc">
           <fileset dir="${basedir}/etc"/>
        </copy>

        <!--
        <copy todir="${dist.home}/examples">
            <fileset dir="${example.home}"/>
        </copy>
        -->
    	
        <copy todir="${build.home}" file="${docs.home}/README" />
        <copy todir="${build.home}" file="${docs.home}/LICENSE" />
    	<copy todir="${build.home}" file="${basedir}/install" />
    	<copy todir="${build.home}" file="${basedir}/migrationpath.txt" />
    	<copy todir="${build.home}" file="${basedir}/svninfo.txt" />
    	
        <tar destfile="${build.home}/${app.name}-${app.version}.tar">
            <tarfileset dir="${build.home}/"
                prefix="${app.name}-${app.version}"
                preserveLeadingSlashes="true"
                excludes="docs/api/**/*">
            </tarfileset>
        </tar>
        
        <zip destfile="${build.home}/${app.name}-${app.version}.zip">
            <zipfileset  dir="${build.home}/" prefix="${app.name}-${app.version}" > 
            </zipfileset>
        </zip>
        
        <gzip zipfile="${build.home}/${app.name}-${app.version}.tar.gz"
                src="${build.home}/${app.name}-${app.version}.tar"/>
        <delete file="${build.home}/${app.name}-${app.version}.tar"/>
    	<delete file="${build.home}/${app.name}-${app.version}.zip"/>
    	                
    </target>
            

    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${build.home}/docs/" />
        <javadoc
            destdir="${build.home}/docs/javadoc"
            author="true"
            version="true"
            use="true"
            windowtitle="bischeck"
        	classpath="${build.home}/classes">
        	
        	<classpath refid="compile.classpath" />

            <fileset dir="${javasrc.home}" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>

            <doctitle><![CDATA[<h1>Bisdw</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2010-2011 Anders Haal. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>

	
	<target name="readme">	  
	   <exec executable="/bin/bash" dir="${docs.home}">   	  
	   <arg value="genreadme.sh"/>
       </exec>
	</target>
	
	<target name="genjaxb" description="Generate jaxb">
	   <exec executable="/bin/bash" dir="${basedir}">      
		<arg value="xsdgen"/>
	   </exec>
		    
	</target>
	
    <target name="prepare">
        <!-- Create build directories as needed -->
    	<mkdir dir="${build.home}" />
    	<mkdir dir="${build.home}/classes" />
    	<mkdir dir="${build.home}/docs" />
    	<mkdir dir="${build.home}/lib" />
    </target>

	<target name="svninfo" description="svn info">
	       <exec executable="svn" output="svninfo.txt" outputproperty="svnrev">      
	            <arg value="log"/>
	            <arg value="--username"/>
	            <arg value="anonymous"/>
	            <arg value="--password"/>
	            <arg value="no"/>
	            <arg value="-rHEAD"/>
	            <arg value="-q"/>
	       </exec>
	       <echo>${svnrev}</echo>   
	</target>
</project>
